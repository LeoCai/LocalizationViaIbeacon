package com.leocai.beaconlocalization.view;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.View;

import java.util.Observable;
import java.util.Observer;

/**
 * Created by leocai on 15-5-3.
 */
public class LocalizationView extends View implements Observer {

    public static final int AERO_PADDING = 10;
    int mapWidth = 2;
    int mapHeigth = 4;
    int pos = 7;
    float prob = 1f;
    static final int AERO_WIDTH = 350;

    private Paint paintAero = new Paint();
    private Paint paintPos = new Paint();

    {
        paintAero.setColor(Color.BLUE);
        paintAero.setAlpha(100);
        paintPos.setColor(Color.RED);
        paintPos.setAlpha(150);
    }


    public LocalizationView(Context context) {
        super(context);
    }

    public LocalizationView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public LocalizationView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        drawMap(canvas);
        drawPos(canvas);

    }

    private void drawPos(Canvas canvas) {
        float posRadius = AERO_WIDTH / 2 / prob;
        int yIndex = pos / mapWidth;
        int xIndex = pos - mapWidth * yIndex;
        canvas.drawCircle(xIndex * AERO_WIDTH + AERO_PADDING + AERO_WIDTH / 2, yIndex * AERO_WIDTH + AERO_PADDING + AERO_WIDTH / 2, posRadius, paintPos);
    }

    private void drawMap(Canvas canvas) {
        int posX;
        int posY;
        for (int i = 0; i < mapWidth; i++) {
            posX = i * AERO_WIDTH;
            for (int j = 0; j < mapHeigth; j++) {
                posY = j * AERO_WIDTH;
                canvas.drawRect(posX + AERO_PADDING, posY + AERO_PADDING, posX + AERO_WIDTH, posY + AERO_WIDTH, paintAero);
            }
        }
    }

    public int getPos() {
        return pos;
    }

    public void setPos(int pos) {
        this.pos = pos;
    }

    public float getProb() {
        return prob;
    }

    public void setProb(float prob) {
        this.prob = prob;
    }

    @Override
    public void update(Observable observable, Object data) {
        postInvalidate();
    }
}
